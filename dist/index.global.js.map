{"version":3,"sources":["../src/index.ts","../src/config/addclient.json","../src/config/index.ts"],"names":["readdir"],"mappings":";AAAA,YAAY,QAAQ;AACpB,YAAY,UAAU;AACtB,SAAS,iBAAiB;;;ACF1B;AAAA,EACE,eAAiB;AACnB;;;ACCA,IAAO,iBAAQ;;;AFEf,IAAMA,WAAU,UAAa,UAAO;AAEpC,IAAM,EAAE,eAAe,oBAAoB,IAAI;AAExC,IAAM,eAAe,OAAO,aAAyC;AAC1E,MAAI;AACF,UAAM,OAAO,MAAS,gBAAa,UAAU,MAAM;AACnD,QAAI,CAAC,KAAK,WAAW,eAAe,GAAG;AACrC,YAAS,iBAAc,UAAU,oBAAoB,MAAM,MAAM;AACjE,cAAQ,IAAI,0BAA0B,QAAQ,EAAE;AAAA,IAClD,OAAO;AACL,cAAQ,IAAI,mCAAmC,QAAQ,EAAE;AAAA,IAC3D;AAAA,EACF,SAAS,OAAO;AACd,UAAM,IAAI,MAAM,yBAAyB,QAAQ,KAAK,KAAK,EAAE;AAAA,EAC/D;AACF;AAEO,IAAM,mBAAmB,OAC9B,kBACkB;AAClB,MAAI;AACF,UAAM,UAAU,MAAMA,SAAQ,eAAe,EAAE,eAAe,KAAK,CAAC;AAEpE,eAAW,UAAU,SAAS;AAC5B,YAAM,WAAgB,UAAK,eAAe,OAAO,IAAI;AACrD,UAAI,OAAO,YAAY,GAAG;AACxB,cAAM,iBAAiB,QAAQ;AAAA,MACjC,WACG,OAAO,OAAO,KAAU,aAAQ,QAAQ,MAAM,SAC1C,aAAQ,QAAQ,MAAM,QAC3B;AACA,cAAM,aAAa,QAAQ;AAAA,MAC7B;AAAA,IACF;AAAA,EACF,SAAS,OAAO;AACd,UAAM,IAAI,MAAM,8BAA8B,aAAa,KAAK,KAAK,EAAE;AAAA,EACzE;AACF;AAKe,SAAR,iBAAwC;AAC7C,QAAM,gBAAqB,UAAK,WAAW,mBAAmB;AAC9D,mBAAiB,aAAa;AAChC","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport { promisify } from 'util';\nimport config from './config';\nimport { ProcessDirectory, AddClient } from './types';\nconst readdir = promisify(fs.readdir);\n\nconst { directoryPath: configDirectoryPath } = config;\n\nexport const addUseClient = async (filePath: AddClient['directoryPath']) => {\n  try {\n    const data = await fs.readFileSync(filePath, 'utf8');\n    if (!data.startsWith(\"'use client';\")) {\n      await fs.writeFileSync(filePath, \"'use client';\\n\" + data, 'utf8');\n      console.log(`'use client'; added to ${filePath}`);\n    } else {\n      console.log(`'use client'; already exists in ${filePath}`);\n    }\n  } catch (error) {\n    throw new Error(`Error processing file ${filePath}: ${error}`);\n  }\n};\n\nexport const processDirectory = async (\n  directoryPath: ProcessDirectory['directoryPath']\n): Promise<void> => {\n  try {\n    const dirents = await readdir(directoryPath, { withFileTypes: true });\n\n    for (const dirent of dirents) {\n      const fullPath = path.join(directoryPath, dirent.name);\n      if (dirent.isDirectory()) {\n        await processDirectory(fullPath);\n      } else if (\n        (dirent.isFile() && path.extname(fullPath) === '.ts') ||\n        path.extname(fullPath) === '.tsx'\n      ) {\n        await addUseClient(fullPath);\n      }\n    }\n  } catch (error) {\n    throw new Error(`Error processing directory ${directoryPath}: ${error}`);\n  }\n};\n/**\n * This function is the entry point for the CLI.\n * It processes the directory specified in the config file.\n */\nexport default function ReactUseClient(): void {\n  const directoryPath = path.join(__dirname, configDirectoryPath);\n  processDirectory(directoryPath);\n}\n","{\n  \"directoryPath\": \"src\"\n}\n","import { Config } from '../types';\nimport config from './addclient.json';\n\nexport default config as Config;"]}